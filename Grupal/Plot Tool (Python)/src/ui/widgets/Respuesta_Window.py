# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'respuestaWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
from PyQt5 import QtCore, QtGui, QtWidgets

from src.ui.widgets.Respuesta_Window_design import Respuesta_Window_design
# from RespuestaWindow_design import Respuesta_Window_design

class Respuesta_Window(QtWidgets.QDialog, Respuesta_Window_design):

    def __init__(self, *args, **kargs):
        super().__init__(*args, **kargs)

        self.setupUi(self)

        # Validacion para las entradas de texto
        regexVal = QtGui.QRegExpValidator(QtCore.QRegExp("(\+|-)?\d+\.?\d*((e|E)(\+|-)?\d+)?"))     # Cualquier numero real
        self.amplitudT.setValidator(regexVal)
        
        regexVal = QtGui.QRegExpValidator(QtCore.QRegExp("\d+\.?\d*((e|E)(\+|-)?\d+)?"))    # Solo numeros positivos
        self.frecuenciaAngularT.setValidator(regexVal)
        self.dutyCycleT.setValidator(regexVal)

        self.horizontalWidget_5.setVisible(False)  # Ocultamos los campos del duty
        self.horizontalWidget_6.setVisible(False)  # Ocultamos los campos del path

        self.pathBtn.clicked.connect(self._selectFile)
        self.okBtn.clicked.connect(self._okBtnClick)

        # Seteo del ID de los botones en orden (Por default es arbitrario)
        btns = self.buttonGroup.buttons()
        for i in range(len(btns)):
            self.buttonGroup.setId(btns[i], i)

        # Valores de retorno
        self.name = ''
        self.type = self.buttonGroup.checkedId()
        self.amp = 0
        self.freq = 0
        self.freqType = self._getFreqType()
        self.duty = 1
        self.path = ''

    def _getFreqType(self):
        return 'F' if self.radioButtonF.isChecked() else 'W'

    def _selectFile(self):     # Opcion de cargar desde archivo
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(
                        None,
                        "Select File",
                        "",
                        "CSV File (*.csv)",
                        )
        if fileName:
            self.pathT.setText(fileName)

    def _okBtnClick(self):
        self.name = self.nombreT.text()

        # Verifica que todos los campos visible tengan los datos correctos
        if self.name and    \
        ((self.amplitudT.isVisible() and self.amplitudT.hasAcceptableInput()) or not self.amplitudT.isVisible()) and \
        ((self.frecuenciaAngularT.isVisible() and self.frecuenciaAngularT.hasAcceptableInput()) or not self.frecuenciaAngularT.isVisible()) \
        and ((self.dutyCycleT.isVisible() and self.dutyCycleT.hasAcceptableInput() and float(self.dutyCycleT.text()) <= 1.0) or not self.dutyCycleT.isVisible()) \
        and ((self.pathT.isVisible() and os.path.exists(self.pathT.text())) or not self.pathT.isVisible()):
            self.type = self.buttonGroup.checkedId()

            if self.amplitudT.isVisible():
                self.amp = float(self.amplitudT.text())
            if self.frecuenciaAngularT.isVisible():
                self.freq = float(self.frecuenciaAngularT.text())
            if self.dutyCycleT.isVisible():
                self.duty = float(self.dutyCycleT.text())
            if self.pathT.isVisible():
                self.path = self.pathT.text()
            
            self.freqType = self._getFreqType()
            self.accept()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = Respuesta_Window()
    ui.show()
    sys.exit(app.exec_())
