# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from src.ui.widgets.H_Window_design import H_Window_design
# from H_Window_design import H_Window_design


class H_Window(QtWidgets.QDialog, H_Window_design):

    def __init__(self, *args, **kargs) -> None:
        super().__init__(*args, **kargs)

        self.setupUi(self)

        # Expresion regular para tomar valores validos de numeros decimales separados por comas (punto separador decimal)
        regexVal = QtGui.QRegExpValidator(QtCore.QRegExp("(\d+\.?\d*(e\d+)?\d*,)+"))

        self.numeradorT.setValidator(regexVal)
        self.denominadorT.setValidator(regexVal)

        self.numeradorT.textChanged.connect(self.updateTF)
        self.denominadorT.textChanged.connect(self.updateTF)

        self.widgetTransferencia.setText('$H(s) =$')

        self.okBtn.clicked.connect(self.okBtnClick)

    def okBtnClick(self):
        self.accept()

    def updateTF(self):
        num = self.numeradorT.text()
        den = self.denominadorT.text()

        if num and den:
            try:
                # Lo convierto en arreglo de floats, omitiendo las comas finales
                numArr = [float(i) for i in list(filter(None, num.split(',')))]
                denArr = [float(i) for i in list(filter(None, den.split(',')))]

                num = self.arrToPol(numArr)
                den = self.arrToPol(denArr)


                self.widgetTransferencia.setText("$H(s) = \\frac{" + num + "}{" + den + "}$" )
            except:
                print("Entrada incorrecta")
        else:
            self.widgetTransferencia.setText("$H(s) =$")

    
    def arrToPol(self, arr=[]):
        pol = ''
        for i in range(len(arr)):
            q = len(arr)-i-1
            if arr[i] != 0:

                if i>0 and arr[i-1] > 0:
                    pol += ' + '

                pol += "{:.2f}".format(arr[i])
                if  q > 1:
                    pol += 's^' + str(q)
                elif q==1:
                    pol += 's'
            elif i > 0 and i < len(arr)-1 and arr[i+1] > 0:
                pol += ' + '

        return pol 


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = H_Window()
    ui.show()
    sys.exit(app.exec_())
